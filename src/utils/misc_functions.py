import os
import asyncio
import aiofiles.os
import subprocess
import json
import tempfile
import pandas as pd
from datetime import datetime, timedelta
from typing import Union
from urllib.parse import urlparse
from openpyxl import Workbook

from aiogram import Bot
from aiogram.types import FSInputFile, CallbackQuery, Message

from src.data.repositories.user_repository import user_crud
from src.data.repositories.specialist_repository import specialist_crud
from src.data.repositories.service_repository import service_crud
from src.data.repositories.assessmentOfQuality_repository import aoq_crud
from src.data.repositories.netPromoterScore_repository import nps_crud
from src.data.db import db_url
from src.data.models import tz_now_naive
# # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ 00:00:15
# async def update_profit_day(bot: Bot):
#     await send_admins(bot, get_statistics())

#     Settingsx.update(misc_profit_day=get_unix())


# # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 00:00:10
# async def update_profit_week():
#     Settingsx.update(misc_profit_week=get_unix())


# # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –≤ 00:00:05
# async def update_profit_month():
#     Settingsx.update(misc_profit_month=get_unix())

async def cleanup_old_backups(folder_path="src/data/backups", keep_latest=7):
    if not await aiofiles.os.path.exists(folder_path):
        raise FileNotFoundError(f"–ü–∞–ø–∫–∞ {folder_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    dump_files = [
        f for f in await aiofiles.os.listdir(folder_path)
        if f.startswith("backup_") and f.endswith(".dump")
    ]
    
    if len(dump_files) <= keep_latest:
        return  # –ù–µ—Ç –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
    
    # –ü–æ–ª–Ω—ã–µ –ø—É—Ç–∏
    full_paths = [os.path.join(folder_path, f) for f in dump_files]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    async def get_mtime(path):
        stat = await aiofiles.os.stat(path)
        return stat.st_mtime

    mtimes = await asyncio.gather(*(get_mtime(p) for p in full_paths))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫ –Ω–æ–≤–æ–º—É)
    sorted_files = [p for _, p in sorted(zip(mtimes, full_paths))]
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ, –æ—Å—Ç–∞–≤–ª—è—è keep_latest –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
    files_to_delete = sorted_files[:-keep_latest]
    
    for file_path in files_to_delete:
        try:
            await aiofiles.os.remove(file_path)
            print(f"–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {file_path}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path}: {e}")

async def backup_db(bot: Bot):
    admins = await user_crud.get_list(role="admin")
    now = tz_now_naive().date()
    filepath = f"src/data/backups/backup_{now}.dump"

    parsed = urlparse(db_url)
    DB_USER = parsed.username
    DB_PASSWORD = parsed.password
    DB_HOST = parsed.hostname
    DB_PORT = parsed.port or 5432
    DB_NAME = parsed.path.lstrip("/")
    
    proc = await asyncio.create_subprocess_exec(
    "pg_dump",
    "-h", DB_HOST,
    "-p", str(DB_PORT),
    "-U", DB_USER,
    "-F", "c",
    "-f", filepath,
    DB_NAME,
    env={**os.environ, "PGPASSWORD": DB_PASSWORD},
    stdout=asyncio.subprocess.PIPE,
    stderr=asyncio.subprocess.PIPE
)
    stdout, stderr = await proc.communicate()
    if proc.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {stderr.decode()}")
        for admin in admins:
            try:
                await bot.send_message(
                    chat_id=admin.tg_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n<code>{stderr.decode()}</code>"
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.tg_id}: {e}")
                
    await cleanup_old_backups()

async def send_backup_file(bot: Bot):
    admins = await user_crud.get_list(role="admin")
    path = "src/data/backups"

    dump_files = [
        f for f in await aiofiles.os.listdir(path)
        if f.startswith("backup_") and f.endswith(".dump")
    ]

    if not dump_files:
        return None

    full_paths = [os.path.join(path, f) for f in dump_files]

    async def get_mtime(path):
        stat = await aiofiles.os.stat(path)
        return stat.st_mtime

    mtimes = await asyncio.gather(*(get_mtime(p) for p in full_paths))
    latest_file = max(zip(full_paths, mtimes), key=lambda x: x[1])[0]

    backup_file = FSInputFile(latest_file)

    for admin in admins:
        try:
            await bot.send_document(
                chat_id=admin.tg_id,
                document=backup_file,
                caption="‚úÖ –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—ç–∫–∞–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.tg_id}: {e}")

async def spam_message(event: CallbackQuery, message: Message):
    users_receive, users_block, users_count = 0, 0, 0

    users = await user_crud.get_list()

    for user in users:
        try:
            await event.bot.copy_message(
                chat_id=user.tg_id,
                from_chat_id=message.from_user.id,
                message_id=message.message_id,
            )
            users_receive += 1
        except Exception as ex:
            users_block += 1

        users_count += 1

        if users_count % 10 == 0:
            await event.message.edit_text(f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... ({users_count}/{len(users)})</b>")

        await asyncio.sleep(0.07)

    await event.message.edit_text(
            "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"+
            "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"+
            f"\nüë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"+
            f"\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {users_receive}"+
            f"\n‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {users_block}"
    )

async def send_analytics(bot: Bot, user_tg_id: int):
    now = tz_now_naive()
    last_month = now - timedelta(days=30)
    last_week = now - timedelta(days=7)

    specialists = await specialist_crud.get_list()
    services = await service_crud.get_list()
    all_aoqs = await aoq_crud.get_list()
    all_nps = await nps_crud.get_list()

    # --- –ê–ù–ê–õ–ò–¢–ò–ö–ê –ó–ê –ú–ï–°–Ø–¶ ---
    avg_score_by_specialist_month = {}
    avg_score_by_service_month = {}

    for spec in specialists:
        scores = [aoq.score for aoq in all_aoqs if aoq.specialist_id == spec.id and aoq.created_at >= last_month]
        if scores:
            avg_score_by_specialist_month[spec.fullname] = float(sum(scores)/len(scores))

    for service in services:
        scores = [aoq.score for aoq in all_aoqs if aoq.service_id == service.id and aoq.created_at >= last_month]
        if scores:
            avg_score_by_service_month[service.name] = float(sum(scores)/len(scores))

    total_aoq_month = len([aoq for aoq in all_aoqs if aoq.created_at >= last_month])
    total_nps_month = len([nps for nps in all_nps if nps.created_at >= last_month])

    top_5_specialists_month = sorted(
        [{'fullname': k, 'avg_score': v} for k, v in avg_score_by_specialist_month.items()],
        key=lambda x: x['avg_score'], reverse=True
    )[:5]

    message_lines_month = [
        "<b>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:</b>",
        f"üìù <b>–û—Ü–µ–Ω–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞:</b> {total_aoq_month}",
        f"‚≠ê <b>NPS:</b> {total_nps_month}\n",
        "<b>üèÜ –¢–æ–ø-5 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É:</b>"
    ]
    for i, spec in enumerate(top_5_specialists_month, start=1):
        message_lines_month.append(f"{i}. <b>{spec['fullname']}</b> ‚Äî {spec['avg_score']:.2f}")

    if avg_score_by_service_month:
        message_lines_month.append("\n<b>üìå –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —É—Å–ª—É–≥–∞–º:</b>")
        for name, avg in avg_score_by_service_month.items():
            message_lines_month.append(f"- {name}: {avg:.2f}")

    await bot.send_message(user_tg_id, "\n".join(message_lines_month), parse_mode="HTML")

    # --- –ê–ù–ê–õ–ò–¢–ò–ö–ê –ó–ê –ù–ï–î–ï–õ–Æ ---
    avg_score_by_specialist_week = {}
    avg_score_by_service_week = {}

    for spec in specialists:
        scores = [aoq.score for aoq in all_aoqs if aoq.specialist_id == spec.id and aoq.created_at >= last_week]
        if scores:
            avg_score_by_specialist_week[spec.fullname] = float(sum(scores)/len(scores))

    for service in services:
        scores = [aoq.score for aoq in all_aoqs if aoq.service_id == service.id and aoq.created_at >= last_week]
        if scores:
            avg_score_by_service_week[service.name] = float(sum(scores)/len(scores))

    total_aoq_week = len([aoq for aoq in all_aoqs if aoq.created_at >= last_week])
    total_nps_week = len([nps for nps in all_nps if nps.created_at >= last_week])

    top_5_specialists_week = sorted(
        [{'fullname': k, 'avg_score': v} for k, v in avg_score_by_specialist_week.items()],
        key=lambda x: x['avg_score'], reverse=True
    )[:5]

    message_lines_week = [
        "<b>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b>",
        f"üìù <b>–û—Ü–µ–Ω–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞:</b> {total_aoq_week}",
        f"‚≠ê <b>NPS:</b> {total_nps_week}\n",
        "<b>üèÜ –¢–æ–ø-5 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É:</b>"
    ]
    for i, spec in enumerate(top_5_specialists_week, start=1):
        message_lines_week.append(f"{i}. <b>{spec['fullname']}</b> ‚Äî {spec['avg_score']:.2f}")

    if avg_score_by_service_week:
        message_lines_week.append("\n<b>üìå –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —É—Å–ª—É–≥–∞–º:</b>")
        for name, avg in avg_score_by_service_week.items():
            message_lines_week.append(f"- {name}: {avg:.2f}")

    await bot.send_message(user_tg_id, "\n".join(message_lines_week), parse_mode="HTML")
    
async def send_full_statistics_excel(bot: Bot, user_tg_id: int = None):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ AOQ –∏ NPS —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–µ–π
    aoqs = await aoq_crud.get_list_with_relations()
    nps_list = await nps_crud.get_list_with_relations()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
    aoq_data = []
    for aoq in aoqs:
        aoq_data.append({
            "AOQ ID": aoq.id,
            "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç": aoq.specialist.fullname if aoq.specialist else None,
            "–£—Å–ª—É–≥–∞": aoq.service.name if aoq.service else None,
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": aoq.user.full_name if aoq.user else aoq.user.username if aoq.user else None,
            "Score": aoq.score,
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": aoq.comment,
            "–î–∞—Ç–∞": aoq.created_at,
        })

    nps_data = []
    for nps in nps_list:
        nps_data.append({
            "AOQ NAME": nps.aoq.id if nps.aoq else None,
            "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç": nps.aoq.specialist.fullname if nps.aoq and nps.aoq.specialist else None,
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": nps.user.full_name if nps.user else nps.user.username if nps.user else None,
            "Score": nps.score,
            "–î–∞—Ç–∞": nps.created_at,
        })
    date = tz_now_naive().date()
    # –°–æ–∑–¥–∞–µ–º Excel –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
    with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp:
        with pd.ExcelWriter(tmp.name, engine="openpyxl") as writer:
            pd.DataFrame(aoq_data).to_excel(writer, sheet_name="AOQ", index=False)
            pd.DataFrame(nps_data).to_excel(writer, sheet_name="NPS", index=False)

        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ Telegram –∫–∞–∫ InputFile
        file = FSInputFile(tmp.name, filename=f"full_statistics-{date}.xlsx")
        if user_tg_id:
            await bot.send_document(user_tg_id, file, caption="üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AOQ –∏ NPS")
        else:
            admins = await user_crud.get_list(role="admin")
            for admin in admins:
                try:
                    await bot.send_document(admin.tg_id, file, caption="üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AOQ –∏ NPS")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.tg_id}: {e}")
    os.remove(tmp.name)