from typing import Any, Sequence, Callable, TypeVar, Optional
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.utils.const_functions import ikb

from src.data.repositories.socialCategory_repository import social_category_crud
from src.data.repositories.socialSubcategory_repository import social_subcategory_crud
from src.data.repositories.service_repository import service_crud


T = TypeVar("T")

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup



async def social_category_actions_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
    """
    catergories = await social_category_crud.get_list()
    
    if len(catergories) > 0:
        buttons = (
            ikb(text="–ò–º–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π JSON", callback_data='import_categories'),
            ikb(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data='add_category'),
            ikb(text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data='remove_category'),
            ikb(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data='add_subcategory@category'),
            ikb(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data='remove_subcategory@category'),
        )
    else:
        buttons = (
            ikb(text="–ò–º–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π JSON", callback_data='import_categories'),
            ikb(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data='add_category'),
            ikb(text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data='remove_category'),
        )
    builder = InlineKeyboardBuilder()

        
    builder.row(*buttons)
    builder.adjust(1)
    builder.row(ikb(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


async def social_category_selection_kb(
    _type: str, 
    action: str, 
    page: int = 1, 
    category_id: int = None
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    per_page = 10
    if _type == "ctg":
        categories = await social_category_crud.get_list()
    else:
        categories = await social_subcategory_crud.get_list(category_id=category_id)

    total = len(categories)
    start = (page - 1) * per_page
    end = start + per_page
    sliced = categories[start:end]
    builder = InlineKeyboardBuilder()
    for category in sliced:
        builder.row(
            ikb(
                text=category.name, 
                callback_data=f'select@{_type}:{category.id}_{action}'
            )
        )

    # --- –ø–∞–≥–∏–Ω–∞—Ü–∏—è ---
    buttons = []
    if page > 1:
        buttons.append(
            ikb(
                text="‚¨ÖÔ∏è", 
                callback_data=f'change_page@{_type}:{page-1}_{action}_{category_id or 0}'
            )
        )
    if end < total:
        buttons.append(
            ikb(
                text="‚û°Ô∏è", 
                callback_data=f'change_page@{_type}:{page+1}_{action}_{category_id or 0}'
            )
        )
    if buttons:
        builder.row(*buttons)
    builder.row(ikb(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))
    return builder.as_markup()


async def service_menu_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å —É—Å–ª—É–≥–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    buttons = (
        ikb(text="–ò–º–ø–æ—Ä—Ç —É—Å–ª—É–≥ JSON", callback_data='menu@service:import'),
        ikb(text="–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data='menu@service:add'),
        ikb(text="–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", callback_data='menu@service:remove'),
        ikb(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏", callback_data='menu@service:view'),
    )
        
    builder.row(*buttons)
    builder.row(ikb(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

async def service_actions_kb(action: str, page: int = 1) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —É—Å–ª—É–≥–∞–º–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    services = await service_crud.get_list()
    per_page = 10
    total = len(services)
    start = (page - 1) * per_page
    end = start + per_page

    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É—Å–ª—É–≥ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for service in services[start:end]:
        builder.row(
            ikb(
                text=service.name, 
                callback_data=f'service_action:{action}_{service.id}'
            )
        )

    # --- –ø–∞–≥–∏–Ω–∞—Ü–∏—è ---
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(
            ikb(
                text="‚¨ÖÔ∏è",
                callback_data=f'change_page@service:{action}_{page-1}'
            )
        )
    if end < total:
        pagination_buttons.append(
            ikb(
                text="‚û°Ô∏è",
                callback_data=f'change_page@service:{action}_{page+1}'
            )
        )
    if pagination_buttons:
        builder.row(*pagination_buttons)

    # –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    builder.row(ikb(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))

    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

async def assessment_score_kb(_type: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞.
    """
    builder = InlineKeyboardBuilder()
    
    buttons = (
        ikb(text="1", callback_data=f'assessment_score@{_type}:1'),
        ikb(text="2", callback_data=f'assessment_score@{_type}:2'),
        ikb(text="3", callback_data=f'assessment_score@{_type}:3'),
        ikb(text="4", callback_data=f'assessment_score@{_type}:4'),
        ikb(text="5", callback_data=f'assessment_score@{_type}:5'),
    )
    builder.row(*buttons)
    builder.row(ikb(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    

    
async def accesses_kb():
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    buttons = (
        ikb(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data='add_admin'),
        ikb(text="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data='remove_admin'),
        ikb(text="–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data='add_moderator'),
        ikb(text="–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data='remove_moderator'),
    )
        
    builder.row(*buttons)
    builder.row(ikb(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

async def specialist_action_kb():
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    buttons = (
        ikb(text="–ò–º–ø–æ—Ä—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ EXCEL", callback_data='import_specialists'),
        ikb(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤", callback_data='view_specialists'),
        ikb(text="–î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", callback_data='add_specialist'),
        ikb(text="–£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", callback_data='remove_specialist'),
    )

    builder.row(*buttons)
    builder.row(ikb(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

async def spam_confirmation_kb():
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    builder = InlineKeyboardBuilder()
    buttons = (
        ikb(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='spam_confirmation:yes'),
        ikb(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='spam_confirmation:no'),
    )

    builder.row(*buttons)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)