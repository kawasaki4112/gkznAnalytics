import os, asyncio, json
import pandas as pd
from typing import Union
from uuid import UUID
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject, StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

import src.keyboards.inline_keyboards as ikb
import src.keyboards.reply_keyboards as rkb
import src.states as st
from src.data.models import UserRole, tz_now_naive
from src.data.repositories.user_repository import user_crud
from src.data.repositories.specialist_repository import specialist_crud
from src.data.repositories.service_repository import service_crud
from src.data.repositories.assessmentOfQuality_repository import aoq_crud
from src.data.repositories.netPromoterScore_repository import nps_crud
from src.data.repositories.socialCategory_repository import social_category_crud
from src.data.repositories.socialSubcategory_repository import social_subcategory_crud
from src.utils.misc_functions import spam_message, backup_db, send_backup_file, send_analytics, send_full_statistics_excel

router = Router(name="user_router")

select_menu_item = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:"

@router.callback_query(F.data.in_(['main_menu']))
@router.message(F.text.in_('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
@router.message(Command("start"))
async def start(event: Union[Message,CallbackQuery], state: FSMContext, command: CommandObject = None):
    await state.clear()
    user = await user_crud.get(tg_id=event.from_user.id)
    if isinstance(event, CallbackQuery):
        await event.message.delete()
        await event.message.answer(select_menu_item, reply_markup=await rkb.main_menu_kb(user.tg_id))
    
    elif isinstance(event, Message):
        if command.args:
            aoq_list = await aoq_crud.get_list(user_id=user.id)
            now = tz_now_naive()
            last_week = now - timedelta(days=7)
            
            aoq_on_last_7_days = False
            for aoq in aoq_list:
                if aoq.created_at > last_week:
                    aoq_on_last_7_days = True
                    break

            # –µ—Å–ª–∏ –±—ã–ª–∞ –æ—Ü–µ–Ω–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π ‚Üí –∑–∞–ø—Ä–µ—â–∞–µ–º
            if aoq_on_last_7_days:
                await event.answer(
                    "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ü–µ–Ω–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π. –°–ø–∞—Å–∏–±–æ!",
                    reply_markup=await rkb.main_menu_kb(user.tg_id)
                )
            else:
                await event.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=await ikb.social_category_selection_kb(_type="ctg", action="select")
                )
                await state.set_state(st.UserStates.waiting_for_social_category)
                await state.update_data(specialist_id=command.args)

        else:
            await event.answer(f"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ì–ö–ó–ù", reply_markup=await rkb.main_menu_kb(user.tg_id))

@router.message(Command("cancel_input"))
async def cancel_input(event: Message, state: FSMContext):
    await state.clear()
    await event.answer("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=await rkb.main_menu_kb(event.from_user.id))

#####################################################################################################################################
############################################################## –î–æ—Å—Ç—É–ø—ã ##############################################################
#####################################################################################################################################

@router.message(F.text.in_('üóùÔ∏è –î–æ—Å—Ç—É–ø—ã'))
async def manage_access(event: Message, state: FSMContext):
    await state.clear()
    
    await event.answer(select_menu_item, reply_markup=await ikb.accesses_kb())
    
@router.callback_query(F.data.in_(['add_admin', 'remove_admin', 'add_moderator', 'remove_moderator']))
async def manage_access_callback(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.update_data(action=event.data)
    await event.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è {"–¥–æ–±–∞–≤–ª–µ–Ω–∏—è" if event.data.startswith(('add')) else "—É–¥–∞–ª–µ–Ω–∏—è"}:", reply_markup=None)
    await state.set_state(st.UserStates.waiting_for_username)

@router.message(st.UserStates.waiting_for_username)
async def process_username(event: Message, state: FSMContext):
    await state.update_data(username=event.text)
    data = await state.get_data()
    await state.clear()
    if data['action'] in ['add_admin', 'remove_admin', 'add_moderator', 'remove_moderator']:
        username = event.text.strip().lstrip('@')
        action = "added" if data['action'].startswith(("add")) else "removed"
        role = "admin" if "admin" in data['action'] else "moderator"

        if action == "removed":
            await user_crud.update(
                filters={"username": username},
                updates={"role": UserRole.USER.value}
            )
        else:
            await user_crud.update(
                filters={"username": username},
                updates={"role": role}
            )


        await event.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –±—ã–ª {"—É–¥–∞–ª–µ–Ω" if action == "removed" else "–¥–æ–±–∞–≤–ª–µ–Ω"} –∫–∞–∫ {"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if role == "admin" else "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä"}.", reply_markup=await rkb.main_menu_kb(event.from_user.id))
        await state.clear()
        
#########################################################################################################################################
############################################################## –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã ##############################################################
#########################################################################################################################################

@router.message(F.text.in_('üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã'))
async def manage_specialists(event: Message, state: FSMContext):
    await state.clear()

    await event.answer(select_menu_item, reply_markup=await ikb.specialist_action_kb())

@router.callback_query(F.data.in_(['import_specialists', 'view_specialists', 'add_specialist', 'remove_specialist']))
async def manage_specialists_callback(event: CallbackQuery, state: FSMContext):
    await state.clear()
    
    if event.data == 'import_specialists':
        await event.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ EXCEL.", reply_markup=None)
        await state.set_state(st.SpecialistStates.waiting_for_specialist_import)
    
    elif event.data == 'view_specialists':
        await event.message.delete()
        specialists = await specialist_crud.get_list()
        if not specialists:
            await event.message.answer("–°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø—É—Å—Ç.", reply_markup=await ikb.specialist_action_kb())
            return

        lines = [
            f"{idx+1}. {spec.fullname} ‚Äî {spec.position} –≤ {spec.organization}\nüîó {spec.link or '—Å—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
            for idx, spec in enumerate(specialists)
        ]

        chunks = []
        current = ""
        for line in lines:
            if len(current) + len(line) + 1 > 4000:
                chunks.append(current)
                current = ""
            current += line + "\n"
        if current:
            chunks.append(current)

        await event.message.answer("*–°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:*", parse_mode="HTML")
        for chunk in chunks:
            await event.message.answer(f"\n{chunk}", parse_mode="HTML")

        await event.message.answer(select_menu_item, reply_markup=await ikb.specialist_action_kb())


    elif event.data == 'add_specialist':
        await event.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –§–ò–û —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:", reply_markup=None)
        await state.set_state(st.SpecialistStates.waiting_for_specialist_fio)

    elif event.data == 'remove_specialist':
        await event.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –§–ò–û —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=None)
        await state.set_state(st.SpecialistStates.waiting_for_specialist_fio)
        
        await state.update_data(action='remove_specialist')

@router.message(st.SpecialistStates.waiting_for_specialist_import)
async def process_specialist_import(event: Message, state: FSMContext):
    # === 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ ===
    if not event.document:
        await event.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xls –∏–ª–∏ .xlsx).")
        return

    if not event.document.file_name.lower().endswith(('.xls', '.xlsx')):
        await event.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel (.xls, .xlsx).")
        return

    # === 2. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª ===
    os.makedirs("src/files", exist_ok=True)
    file_info = await event.bot.get_file(event.document.file_id)
    file_path = f"src/files/{event.document.file_name}"
    await event.bot.download_file(file_info.file_path, destination=file_path)

    # === 3. –ß–∏—Ç–∞–µ–º Excel ===
    df = pd.read_excel(file_path, sheet_name="–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏").where(pd.notnull, None)

    # === 4. –ö—ç—à–∏—Ä—É–µ–º username –±–æ—Ç–∞ ===
    bot_username = (await event.bot.get_me()).username

    created_count = 0
    specialists_to_create = []

    for _, row in df.iterrows():
        row_data = {
            "organization": row["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"],
            "position": row["–î–æ–ª–∂–Ω–æ—Å—Ç—å"],
            "fullname": row["–§–ò–û"],
            "department": row["–û—Ç–¥–µ–ª"],
        }

        existing = await specialist_crud.get(**row_data)
        if not existing:
            specialists_to_create.append(row_data)

    for spec in specialists_to_create:
        spec_obj = await specialist_crud.create(**spec)
        await specialist_crud.update(
            filters={
                "organization": spec["organization"],
                "position": spec["position"],
                "fullname": spec["fullname"]
            },
            updates={"link": f"https://t.me/{bot_username}?start={spec_obj.id}"}
        )
        created_count += 1

    try:
        os.remove(file_path)
    except FileNotFoundError:
        pass

    await event.answer(
        f"–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n–î–æ–±–∞–≤–ª–µ–Ω–æ {created_count} –Ω–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.",
        reply_markup=await ikb.specialist_action_kb()
    )
    await state.clear()

@router.message(st.SpecialistStates.waiting_for_specialist_fio)
async def process_specialist_fio(event: Message, state: FSMContext):
    await state.update_data(fullname=event.text)
    data = await state.get_data()
    
    current_state = await state.get_state()
    
    if current_state == st.SpecialistStates.waiting_for_specialist_fio:
        if 'remove_specialist' in (await state.get_data()).get('action', ''):
            await specialist_crud.delete(fullname=data['fullname'])
            await event.answer(f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {data['fullname']} –±—ã–ª —É–¥–∞–ª–µ–Ω.", reply_markup=await rkb.main_menu_kb(event.from_user.id))
            await state.clear()
        else:
            await event.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:")
            await state.set_state(st.SpecialistStates.waiting_for_specialist_organization)
    
@router.message(st.SpecialistStates.waiting_for_specialist_organization)
async def process_specialist_organization(event: Message, state: FSMContext):
    await state.update_data(organization=event.text)
    await event.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–¥–µ–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–Ω–∞–∫ –º–∏–Ω—É—Å–∞):")
    await state.set_state(st.SpecialistStates.waiting_for_specialist_department)

@router.message(st.SpecialistStates.waiting_for_specialist_department)
async def process_specialist_department(event: Message, state: FSMContext):
    await state.update_data(department=event.text)
    await event.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:")
    await state.set_state(st.SpecialistStates.waiting_for_specialist_position)
    
@router.message(st.SpecialistStates.waiting_for_specialist_position)
async def process_specialist_position(event: Message, state: FSMContext):
    await state.update_data(position=event.text)
    data = await state.get_data()
    bot = await event.bot.get_me()
    specialist = await specialist_crud.create(
            organization=data['organization'],
            position=data['position'],
            fullname=data['fullname'],
            department=data.get('department'),
        )
        
    await specialist_crud.update(
            filters={"fullname": data['fullname'], "organization": data['organization']},
            updates={"link": f"https://t.me/{bot.username}?start={specialist.id}"}
        )
        
    await event.answer(f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {data['fullname']} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=await rkb.main_menu_kb(event.from_user.id))
    await state.clear()
    
#############################################################################################################################################
############################################################## –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ ##############################################################
#############################################################################################################################################

@router.callback_query(F.data.startswith(('change_page@service:')))
async def change_service_page(event: CallbackQuery, state: FSMContext):
    data_parts = event.data.split(':')
    parts = data_parts[1].split('_')

    action = parts[0]
    page = parts[1]
        
    await event.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏:", 
                                 reply_markup=await ikb.service_actions_kb(action=action, page=int(page)))

@router.callback_query(F.data.startswith(('service_action:')))
async def process_assessment_service(event: CallbackQuery, state: FSMContext):
    data_parts = event.data.split(':')
    action = data_parts[-1].split('_')[0]
    service_id = data_parts[-1].split('_')[-1]
    if action == "select":
        await state.update_data(assessment_service_id=service_id)
        await event.message.edit_text("–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:", reply_markup=await ikb.assessment_score_kb(_type = "aoq"))
        await state.set_state(st.UserStates.waiting_for_assessment_score)
    elif action == "remove":
        await service_crud.delete(id=str(service_id))
        await event.message.edit_text("–£—Å–ª—É–≥–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=await ikb.service_menu_kb())
    elif action == "view":
        return

@router.callback_query(F.data.startswith(('assessment_score@')), StateFilter(st.UserStates.waiting_for_assessment_score))
async def process_assessment_score(event: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    data_parts = event.data.split('@') # ['assessment_score', 'aoq:5']
    _type = data_parts[-1].split(':')[0]
    score = int(data_parts[-1].split(':')[-1])
    user = await user_crud.get(tg_id=event.from_user.id)
    
    if _type == "aoq":
        aoq = await aoq_crud.create(
            user_id=user.id,
            specialist_id=state_data.get('specialist_id'),
            service_id=state_data.get('assessment_service_id'),
            score=score,
        )
        await event.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é", reply_markup=None)
        await state.update_data(aoq_id=aoq.id)
        await state.set_state(st.UserStates.waiting_for_assessment_comment)
        asyncio.create_task(send_nps(event, state, aoq.id))
    else:
        aoq_id = state_data.get('aoq_id')
        await nps_crud.create(
            user_id=str(user.id),
            aoq_id=str(aoq_id),
            score=score,
        )

        await event.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!", reply_markup=None)

@router.message(st.UserStates.waiting_for_assessment_comment)
async def process_assessment_comment(event: Message, state: FSMContext):
    data = await state.get_data()
    aoq_id = data.get('aoq_id')
    if aoq_id:
        await aoq_crud.update(
            filters={"id": aoq_id},
            updates={"comment": event.text}
        )
        await event.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é!", reply_markup=await rkb.main_menu_kb(event.from_user.id))
    await state.clear()


async def send_nps(event: Message, state: FSMContext, aoq_id: str):
    nps_delay = int(os.getenv("NPS_DELAY_MINUTES", "10")) * 60
    await asyncio.sleep(nps_delay)
    await event.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à—É –æ–±—â—É—é —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–æ–π, –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –ª–∏ –≤—ã –Ω–∞—Å?", 
                       reply_markup=await ikb.assessment_score_kb(_type="nps"))
    await state.set_state(st.UserStates.waiting_for_assessment_score)
    await state.update_data(aoq_id=aoq_id)
    
######################################################################################################################################
############################################################## –†–∞—Å—Å—ã–ª–∫–∞ ##############################################################
######################################################################################################################################

@router.message(F.text.in_('üì¢ –†–∞—Å—Å—ã–ª–∫–∞'))
async def process_spam_message(event: Message, state: FSMContext):
    await state.clear()
    await state.set_state(st.SpamStates.waiting_for_spam_text)
    await event.answer("üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                       "‚ùï –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø–æ—Å—Ç—ã —Å –ª—é–±—ã–º–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏",
                       )
    
@router.message(st.SpamStates.waiting_for_spam_text)
async def process_spam_text(event: Message, state: FSMContext):
    await state.update_data(spam_message=event)
    
    users = await user_crud.get_list()

    await event.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?", reply_markup=await ikb.spam_confirmation_kb())

@router.callback_query(F.data.startswith(('spam_confirmation')))
async def process_spam_confirmation(event: CallbackQuery, state: FSMContext):
    status = event.data.split(':')[-1]
    data = await state.get_data()
    send_message = data.get('spam_message')
    await state.clear()
    
    if status == 'yes':
        users = await user_crud.get_list()

        await event.message.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (0/{len(users)})", reply_markup=None)

        await asyncio.create_task(spam_message(event, send_message))

    else:
        await event.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=await rkb.main_menu_kb(event.from_user.id))


############################################################################################################################################
############################################################## –°–æ—Ü. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ##############################################################
############################################################################################################################################

@router.message(F.text.in_('üóÇÔ∏è –°–æ—Ü. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'))
async def manage_social_categories(event: Message, state: FSMContext):
    await state.clear()
    await event.answer(select_menu_item, reply_markup=await ikb.social_category_actions_kb())

@router.callback_query(F.data.in_(['import_categories', 'add_category', 'remove_category', 'add_subcategory@category', 'remove_subcategory@category', 'add_subcategory', 'remove_subcategory']))
async def manage_social_categories_callback(event: CallbackQuery, state: FSMContext):
    await state.clear()

    if event.data == 'import_categories':
        await event.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:", reply_markup=None)
        await state.set_state(st.CategoryStates.waiting_for_category_import)

    #done
    elif event.data == 'add_category':
        await event.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=None)
        await state.set_state(st.CategoryStates.waiting_for_category_name)
    
    #done
    elif event.data == 'remove_category':
        await event.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=await ikb.social_category_selection_kb(_type="ctg", action="delete"))

    #done
    elif event.data == 'add_subcategory@category':
        await event.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                      reply_markup=await ikb.social_category_selection_kb(_type="ctg", action="addsubcategory"))

    #done
    elif event.data == 'remove_subcategory@category':
        await event.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                      reply_markup=await ikb.social_category_selection_kb(_type="ctg", action="removesubcategory"))

@router.message(st.CategoryStates.waiting_for_category_import)
async def process_category_import(event: Message, state: FSMContext):
    # === 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ ===
    if not event.document:
        await event.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")
        return

    if not event.document.file_name.lower().endswith('.json'):
        await event.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª.")
        return

    # === 2. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª ===
    os.makedirs("src/files", exist_ok=True)
    file_info = await event.bot.get_file(event.document.file_id)
    file_path = f"src/files/{event.document.file_name}"
    await event.bot.download_file(file_info.file_path, destination=file_path)

    # === 3. –ß–∏—Ç–∞–µ–º JSON ===
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except ValueError:
        await event.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        return

    # === 4. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ ===
    await social_subcategory_crud.delete_all()
    await social_category_crud.delete_all()
    
    # === 5. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –ë–î ===
    created_count = 0
    for category in data:
        # –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        new_category = await social_category_crud.create(
            name=category["name"]
        )
        created_count += 1

        # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for sub in category.get("subcategories", []):
            await social_subcategory_crud.create(
                name=sub["name"],
                category_id=new_category.id
            )
            created_count += 1
    os.remove(file_path)
    await event.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–æ–∑–¥–∞–Ω–æ {created_count} –∑–∞–ø–∏—Å–µ–π.", reply_markup=await ikb.social_category_actions_kb())
    await state.clear()
    
@router.message(st.CategoryStates.waiting_for_category_name)
async def process_category_name(event: Message, state: FSMContext):
    await state.update_data(category_name=event.text)
    
    await social_category_crud.create(name=event.text)
    await event.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{event.text}" –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.', reply_markup=await ikb.social_category_actions_kb())
    await state.clear()

@router.callback_query(F.data.startswith(('change_page@ctg:', 'change_page@subctg:')))
async def categories_process(event: CallbackQuery, state: FSMContext):
    data_parts = event.data.split(':')
    _type = data_parts[0].split('@')[-1]
    
    parts = data_parts[1].split('_')
    
    page = parts[0]
    action = parts[1]
    category_id = parts[2] if len(parts) > 2 else None
    if _type == "ctg":
       await event.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 
                                        reply_markup=await ikb.social_category_selection_kb(_type=_type, action=action, page=int(page)))
    else:
       await event.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 
                                        reply_markup=await ikb.social_category_selection_kb(_type=_type, action=action, page=int(page), category_id=category_id))

@router.callback_query(F.data.startswith(('select@')))
async def select_category_process(event: CallbackQuery, state: FSMContext):    
    data_parts = event.data.split('@', 1)
    parts = data_parts[-1].split(':')
    _type = parts[0]
    parts = parts[1].split('_') 
    id = parts[0] 
    action = parts[1]
    
    if _type == "ctg":
        if action == "delete":
            await social_category_crud.delete(id=str(id))
            await event.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=await ikb.social_category_actions_kb())
        
        elif action == "addsubcategory":
            await event.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=None)
            await state.update_data(category_id=str(id))
            await state.set_state(st.SubCategoryStates.waiting_for_subcategory_name)
        
        elif action == "removesubcategory":
            await event.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", 
                                          reply_markup=await ikb.social_category_selection_kb(_type="subctg", action="delete", category_id=str(id)))
        
        elif action == "select":
            await event.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 
                                          reply_markup=await ikb.social_category_selection_kb(_type="subctg", action="select", category_id=str(id)))

    else:
        if action == "delete":
            await social_subcategory_crud.delete(id=str(id))
            await event.message.edit_text("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=await ikb.social_category_actions_kb())
        elif action == "select":
            data = await state.get_data()
            specialist_id = data.get('specialist_id')
            if specialist_id:
                await user_crud.update(
                    filters={"tg_id": event.from_user.id},
                    updates={"social_subcategory_id": str(id)}
                )
                await event.message.edit_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏:", reply_markup=await ikb.service_actions_kb(action = "select"))
                await state.set_state(st.UserStates.waiting_for_assessment_service)

@router.message(st.SubCategoryStates.waiting_for_subcategory_name)
async def process_subcategory_name(event: Message, state: FSMContext):
    data = await state.get_data()
    category_id = data.get('category_id')
    subctg = await social_subcategory_crud.get(name=event.text)
    if category_id:
        if subctg:
            await event.answer(f'–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è "{event.text}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.')
            await state.set_state(st.SubCategoryStates.waiting_for_subcategory_name)
            return
        await social_subcategory_crud.create(name=event.text, category_id=category_id)
        await event.answer(f'–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è "{event.text}" –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.', reply_markup=await ikb.social_category_actions_kb())
    await state.clear()
    
    
####################################################################################################################################
############################################################## –£—Å–ª—É–≥–∏ ##############################################################
####################################################################################################################################

@router.message(F.text.in_('üõ†Ô∏è –£—Å–ª—É–≥–∏'))
async def process_services(event: Message, state: FSMContext):
    await event.answer(select_menu_item, reply_markup=await ikb.service_menu_kb())

@router.callback_query(F.data.startswith(('menu@service:')))
async def service_menu_handler(event: CallbackQuery, state: FSMContext):
    action = event.data.split(':')[1]
    if action == "import":
        await event.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —É—Å–ª—É–≥–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:", reply_markup=None)
        await state.set_state(st.ServiceStates.waiting_for_service_import)
    elif action == "add":
        await event.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏:", reply_markup=None)
        await state.set_state(st.ServiceStates.waiting_for_service_name)
    elif action == "remove":
        await event.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏ –≤–æ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–µ–π –æ—Ü–µ–Ω–∫–∞—Ö –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –ø–æ–ª—è —É—Å–ª—É–≥!\n—Ç.–µ. –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç —É–∑–Ω–∞—Ç—å –∫ –∫–∞–∫–æ–π —É—Å–ª—É–≥–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ü–µ–Ω–∫–∞.",
                                      reply_markup=await ikb.service_actions_kb(action="remove"))
    elif action == "view":
        await event.message.edit_text("–ü–æ—Å–º–æ—Ç–æ—Ä–µ—Ç—å —É—Å–ª—É–≥–∏", reply_markup=await ikb.service_actions_kb(action="view"))
        
@router.message(st.ServiceStates.waiting_for_service_name)
async def process_service_name(event: Message, state: FSMContext):
    service = await service_crud.create(name=event.text)

    await event.answer(f'–£—Å–ª—É–≥–∞ "{service.name}" –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.', reply_markup=await ikb.service_menu_kb())
    await state.clear()
    
@router.message(st.ServiceStates.waiting_for_service_import)
async def process_service_import(event: Message, state: FSMContext):
    # === 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ ===
    if not event.document:
        await event.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")
        return

    if not event.document.file_name.lower().endswith('.json'):
        await event.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª.")
        return

    # === 2. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª ===
    os.makedirs("src/files", exist_ok=True)
    file_info = await event.bot.get_file(event.document.file_id)
    file_path = f"src/files/{event.document.file_name}"
    await event.bot.download_file(file_info.file_path, destination=file_path)

    # === 3. –ß–∏—Ç–∞–µ–º JSON ===
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except ValueError:
        await event.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        return
    # === 4. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ ===
    await service_crud.delete_all()

    # === 5. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –ë–î ===
    created_count = 0
    for service in data:
        await service_crud.create(
            name=service["name"]
        )
        created_count += 1
    os.remove(file_path)
    await event.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–æ–∑–¥–∞–Ω–æ {created_count} –∑–∞–ø–∏—Å–µ–π.")
    await state.clear()

#######################################################################################################################################
############################################################## backup_db ##############################################################
#######################################################################################################################################

@router.message(F.text.in_('üíæ –í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'))
async def process_backup_db(event: Message, state: FSMContext):
    await state.clear()
    
    await event.answer("–í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞—Ç–∞...")
    await backup_db(bot=event.bot)
    await send_backup_file(bot=event.bot)
    
#######################################################################################################################################
############################################################## –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ##############################################################
#######################################################################################################################################

@router.message(F.text.in_('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞'))
async def process_analytics(event: Message, state: FSMContext):
    await state.clear()
    
    await send_analytics(bot=event.bot, user_tg_id=event.from_user.id)
    await send_full_statistics_excel(bot=event.bot, user_tg_id=event.from_user.id)